// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace ClientPagerProto.Controllers
{
    public partial class DemoListController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DemoListController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DemoListController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PageData()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PageData);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DemoListController Actions { get { return MVC.DemoList; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DemoList";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DemoList";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string CatList = "CatList";
            public readonly string PageData = "PageData";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string CatList = "CatList";
            public const string PageData = "PageData";
        }


        static readonly ActionParamsClass_PageData s_params_PageData = new ActionParamsClass_PageData();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PageData PageDataParams { get { return s_params_PageData; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PageData
        {
            public readonly string variable = "variable";
            public readonly string pageNumber = "pageNumber";
            public readonly string size = "size";
            public readonly string sortByValue = "sortByValue";
            public readonly string sortOrder = "sortOrder";
            public readonly string fltByValue = "fltByValue";
            public readonly string filteringMode = "filteringMode";
            public readonly string filterCaseSensitive = "filterCaseSensitive";
            public readonly string fltVal = "fltVal";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _CatListLayout = "_CatListLayout";
                public readonly string CatList = "CatList";
                public readonly string PagedListPartial = "PagedListPartial";
                public readonly string PagedListPartialOption = "PagedListPartialOption";
            }
            public readonly string _CatListLayout = "~/Views/DemoList/_CatListLayout.cshtml";
            public readonly string CatList = "~/Views/DemoList/CatList.cshtml";
            public readonly string PagedListPartial = "~/Views/DemoList/PagedListPartial.cshtml";
            public readonly string PagedListPartialOption = "~/Views/DemoList/PagedListPartialOption.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DemoListController : ClientPagerProto.Controllers.DemoListController
    {
        public T4MVC_DemoListController() : base(Dummy.Instance) { }

        [NonAction]
        partial void CatListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CatList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CatList);
            CatListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void PageDataOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string variable, int pageNumber, int? size, bool? sortByValue, ClientPagerProto.PaggedList.PagedListSortOrder? sortOrder, bool? fltByValue, ClientPagerProto.PaggedList.PagedListFilteringMode? filteringMode, bool? filterCaseSensitive, string fltVal);

        [NonAction]
        public override System.Web.Mvc.ActionResult PageData(string variable, int pageNumber, int? size, bool? sortByValue, ClientPagerProto.PaggedList.PagedListSortOrder? sortOrder, bool? fltByValue, ClientPagerProto.PaggedList.PagedListFilteringMode? filteringMode, bool? filterCaseSensitive, string fltVal)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PageData);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "variable", variable);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageNumber", pageNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "size", size);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortByValue", sortByValue);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortOrder", sortOrder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fltByValue", fltByValue);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filteringMode", filteringMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterCaseSensitive", filterCaseSensitive);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fltVal", fltVal);
            PageDataOverride(callInfo, variable, pageNumber, size, sortByValue, sortOrder, fltByValue, filteringMode, filterCaseSensitive, fltVal);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
